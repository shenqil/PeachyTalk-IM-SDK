// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "messages.proto" (package "im", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType as MessageType$ } from "@protobuf-ts/runtime";
/**
 * *
 * 消息
 *
 * @generated from protobuf message im.Message
 */
export interface Message {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string; // 消息id
    /**
     * @generated from protobuf field: string from = 2;
     */
    from: string; // 发送者
    /**
     * @generated from protobuf field: string to = 3;
     */
    to: string; // 接收者
    /**
     * @generated from protobuf field: im.ChatType chatType = 4;
     */
    chatType: ChatType; // 聊天类型 单聊、群聊
    /**
     * @generated from protobuf field: im.MessageType type = 5;
     */
    type: MessageType; // 消息类型
    /**
     * @generated from protobuf field: string payload = 6;
     */
    payload: string; // 消息内容
    /**
     * @generated from protobuf field: int64 timestamp = 7;
     */
    timestamp: bigint; // 时间戳
    /**
     * @generated from protobuf field: im.MessageStatus status = 8;
     */
    status: MessageStatus; // 消息状态
    /**
     * @generated from protobuf field: bool recalled = 9;
     */
    recalled: boolean; // 消息是否被撤回
    /**
     * @generated from protobuf field: int64 recallTimestamp = 10;
     */
    recallTimestamp: bigint; // 消息撤回时间戳
    /**
     * @generated from protobuf field: bool deleted = 11;
     */
    deleted: boolean; // 消息是否被删除
    /**
     * @generated from protobuf field: int64 deleteTimestamp = 12;
     */
    deleteTimestamp: bigint; // 消息删除时间戳
    /**
     * @generated from protobuf field: string replyToMessageId = 13;
     */
    replyToMessageId: string; // 被回复的消息的ID
    /**
     * 扩展字段1，留给服务端使用
     *
     * @generated from protobuf field: string serverExtension = 14;
     */
    serverExtension: string;
    /**
     * 扩展字段2，留给P2P客户端使用
     *
     * @generated from protobuf field: string clientExtension = 15;
     */
    clientExtension: string;
}
/**
 * *
 * 消息类型
 *
 * @generated from protobuf enum im.MessageType
 */
export enum MessageType {
    /**
     * *
     * 文本
     *
     * @generated from protobuf enum value: TEXT = 0;
     */
    TEXT = 0,
    /**
     * *
     * 图片
     *
     * @generated from protobuf enum value: IMAGE = 1;
     */
    IMAGE = 1,
    /**
     * *
     * 语音
     *
     * @generated from protobuf enum value: AUDIO = 2;
     */
    AUDIO = 2,
    /**
     * *
     * 视频
     *
     * @generated from protobuf enum value: VEDIO = 3;
     */
    VEDIO = 3,
    /**
     * *
     * 视频
     *
     * @generated from protobuf enum value: CUSTOM = 4;
     */
    CUSTOM = 4
}
/**
 * *
 * 聊天类型
 *
 * @generated from protobuf enum im.ChatType
 */
export enum ChatType {
    /**
     * *
     * 单聊消息
     *
     * @generated from protobuf enum value: CHAT = 0;
     */
    CHAT = 0,
    /**
     * *
     * 群聊消息
     *
     * @generated from protobuf enum value: GROUP_CHAT = 1;
     */
    GROUP_CHAT = 1,
    /**
     * *
     * 系统消息
     *
     * @generated from protobuf enum value: SYSTEM = 2;
     */
    SYSTEM = 2
}
/**
 * *
 * 消息确认状态
 *
 * @generated from protobuf enum im.MessageStatus
 */
export enum MessageStatus {
    /**
     * @generated from protobuf enum value: UNCONFIRMED = 0;
     */
    UNCONFIRMED = 0,
    /**
     * @generated from protobuf enum value: CONFIRMED = 1;
     */
    CONFIRMED = 1
}
// @generated message type with reflection information, may provide speed optimized methods
class Message$Type extends MessageType$<Message> {
    constructor() {
        super("im.Message", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "from", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "to", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "chatType", kind: "enum", T: () => ["im.ChatType", ChatType] },
            { no: 5, name: "type", kind: "enum", T: () => ["im.MessageType", MessageType] },
            { no: 6, name: "payload", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "timestamp", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "status", kind: "enum", T: () => ["im.MessageStatus", MessageStatus] },
            { no: 9, name: "recalled", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "recallTimestamp", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 11, name: "deleted", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 12, name: "deleteTimestamp", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 13, name: "replyToMessageId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 14, name: "serverExtension", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 15, name: "clientExtension", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Message>): Message {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.from = "";
        message.to = "";
        message.chatType = 0;
        message.type = 0;
        message.payload = "";
        message.timestamp = 0n;
        message.status = 0;
        message.recalled = false;
        message.recallTimestamp = 0n;
        message.deleted = false;
        message.deleteTimestamp = 0n;
        message.replyToMessageId = "";
        message.serverExtension = "";
        message.clientExtension = "";
        if (value !== undefined)
            reflectionMergePartial<Message>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Message): Message {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string from */ 2:
                    message.from = reader.string();
                    break;
                case /* string to */ 3:
                    message.to = reader.string();
                    break;
                case /* im.ChatType chatType */ 4:
                    message.chatType = reader.int32();
                    break;
                case /* im.MessageType type */ 5:
                    message.type = reader.int32();
                    break;
                case /* string payload */ 6:
                    message.payload = reader.string();
                    break;
                case /* int64 timestamp */ 7:
                    message.timestamp = reader.int64().toBigInt();
                    break;
                case /* im.MessageStatus status */ 8:
                    message.status = reader.int32();
                    break;
                case /* bool recalled */ 9:
                    message.recalled = reader.bool();
                    break;
                case /* int64 recallTimestamp */ 10:
                    message.recallTimestamp = reader.int64().toBigInt();
                    break;
                case /* bool deleted */ 11:
                    message.deleted = reader.bool();
                    break;
                case /* int64 deleteTimestamp */ 12:
                    message.deleteTimestamp = reader.int64().toBigInt();
                    break;
                case /* string replyToMessageId */ 13:
                    message.replyToMessageId = reader.string();
                    break;
                case /* string serverExtension */ 14:
                    message.serverExtension = reader.string();
                    break;
                case /* string clientExtension */ 15:
                    message.clientExtension = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Message, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string from = 2; */
        if (message.from !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.from);
        /* string to = 3; */
        if (message.to !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.to);
        /* im.ChatType chatType = 4; */
        if (message.chatType !== 0)
            writer.tag(4, WireType.Varint).int32(message.chatType);
        /* im.MessageType type = 5; */
        if (message.type !== 0)
            writer.tag(5, WireType.Varint).int32(message.type);
        /* string payload = 6; */
        if (message.payload !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.payload);
        /* int64 timestamp = 7; */
        if (message.timestamp !== 0n)
            writer.tag(7, WireType.Varint).int64(message.timestamp);
        /* im.MessageStatus status = 8; */
        if (message.status !== 0)
            writer.tag(8, WireType.Varint).int32(message.status);
        /* bool recalled = 9; */
        if (message.recalled !== false)
            writer.tag(9, WireType.Varint).bool(message.recalled);
        /* int64 recallTimestamp = 10; */
        if (message.recallTimestamp !== 0n)
            writer.tag(10, WireType.Varint).int64(message.recallTimestamp);
        /* bool deleted = 11; */
        if (message.deleted !== false)
            writer.tag(11, WireType.Varint).bool(message.deleted);
        /* int64 deleteTimestamp = 12; */
        if (message.deleteTimestamp !== 0n)
            writer.tag(12, WireType.Varint).int64(message.deleteTimestamp);
        /* string replyToMessageId = 13; */
        if (message.replyToMessageId !== "")
            writer.tag(13, WireType.LengthDelimited).string(message.replyToMessageId);
        /* string serverExtension = 14; */
        if (message.serverExtension !== "")
            writer.tag(14, WireType.LengthDelimited).string(message.serverExtension);
        /* string clientExtension = 15; */
        if (message.clientExtension !== "")
            writer.tag(15, WireType.LengthDelimited).string(message.clientExtension);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message im.Message
 */
export const Message = new Message$Type();
